# SPDX-FileCopyrightText: 2025 Rayleigh Research <to@rayleigh.re>
# SPDX-License-Identifier: MIT
# The MIT License (MIT)
# Copyright © 2023 Yuma Rao
# Copyright © 2025 Rayleigh Research

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the “Software”), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of
# the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
# THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import typing
from typing import Optional
import bittensor as bt
from pydantic import BaseModel
from abc import abstractmethod

# This class contains common classes representing the protcol for miners and validators in the simulation subnet.

class AgentInstruction(BaseModel):    
    """
    Base class representing a single instruction submitted by an agent to the validator.
    """
    @abstractmethod
    def payload(self) -> dict:
        ...
        
    def serialize(self) -> dict:
        return {
            "payload" : self.payload()
        }

class AgentResponse(BaseModel):
    """
    Base class representing the response consisting of multiple instructions generated by an agent for submission to validators.
    """
    agent_id : int
    instructions : list[AgentInstruction] = []
    def add_instruction(self, instruction : AgentInstruction):
        self.instructions.append(instruction)

    def serialize(self) -> dict:
        return [
            instruction.serialize() for instruction in self.instructions
        ]

class SimulationStateUpdate(bt.Synapse):
    """
    Base class representing a simulation state update published by validators to miners.

    Attributes:
    - model: A string indicating the type of simulation being run (currently only `im` is supported).
    - response: An optional AgentResponse object which, when filled, represents the response from the miner.
    """

    # Required request input, filled by sending dendrite caller.
    model : str = "im"
    
    @abstractmethod
    def environment_state(self):
        ...
    
    @abstractmethod
    def agent_state(self):
        ...

    # Optional request output, filled by recieving axon.
    response: Optional[AgentResponse] = None

    def deserialize(self) -> int:
        """
        Deserialize the output written by the miner. 
        This method retrieves the response from the miner in the form of an AgentResponse, 
        and returns it as the output of the dendrite.query() call.
        """
        return self.response
    
class SimulationEvent(BaseModel):
    """
    Base class representing an event that has occurred within the simulator which is to be published by validator to miners.
    """
    type : str
    timestamp : int
    agentId : int | None
    
class EventNotification(bt.Synapse):
    """
    Base class representing the notification for a SimulationEvent, this is a synapse which wraps the SimulationEvent class 
    and allows for acknowledgement to be indicated by the receiving miner.
    """
    event : SimulationEvent
    acknowledged : bool = False